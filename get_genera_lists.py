def get_genera():
    genera = ['Bacteroides', 'Prevotella', 'Akkermansia', 'Anaerostripes', 'Anaerotruncas', 'Barnesiella', 'Blautia', 'Roseburia', 'Alloprevotella', 'Porphyromonas', 'Paraprevotella', 'Parabacteroides', 'Oscillibacter', 'Odoribacter', 'Faecalibacterium', 'Enterobacter', 'Shuttleworthia', 'Sediminibacterium', 'Peptoniphilus', 'Moryella', 'Holdemania', 'Gordonibacter', 'Dorea', 'Sutterella', 'Sporobacter', 'Pseudoflavonifractor', 'Flavonifractor', 'Achromobacter', 'Aerococcus', 'Catenibacterium', 'Collinsella', 'Aggregatibacter', 'Anaerococcus', 'Succinivibrio', 'Lachnospira', 'Parasutterella', 'Paralactobacillus', 'Oribacterium', 'Ochrobactrum', 'Murdochiella', 'Mogibacterium', 'Megasphaera', 'Hallella', 'Johnsonella', 'Granulicatella', 'Gemmiger', 'Gardnerella', 'Facklamia', 'Enterococcus', 'Dialister', 'Delftia', 'Cronobacter', 'Citrobacter', 'Chryseobacterium', 'Centipeda', 'Butyricicoccus', 'Bulleidia', 'Brevundimonas', 'Anaeroglobus', 'Arthrobacter', 'Atopobium', 'Bacillus', 'Butyricimonas', 'Deinococcus', 'Helicobacter', 'Microbacterium', 'Pseudobutyrivibrio', 'Schwartzia', 'Succiniclasticum', 'Tannerella', 'Alistipes', 'Catonella', 'Kingella', 'Eremococcus', 'Variovorax', 'Slackia', 'Pyramidobacter', 'Abiotrophia', 'Bordetella', 'Parascardovia', 'Olsenella', 'Jonquetella', 'Xylanibacter', 'Eikenella', 'Christensenella', 'Acidaminococcus', 'Oribaculum', 'Oribaculum', 'Cellulosimicrobium', 'Enterorhabdus', 'Anarosalibacter', 'Murimonas', 'Terrisporobacter', 'Intestinimonas', 'Stenotrophomonas', 'Aminobacter', 'Bradyrhizobium', 'Curvibacter', 'Curvibacter', 'Herbaspirillum', 'Turicibacter', 'Rothia', 'Pedobacter', 'Parvibacter', 'Acidovorax', 'Aeromicrobium', 'Afipia', 'Aquabacterium', 'Aurantimonas', 'Azoarcus', 'Xanthomonas', 'Papillibacter', 'Lachnobacterium', 'Azospira', 'Beutenbergia', 'Micrococcus', 'Polaromonas', 'Pseudoxanthomonas', 'Psychrobacter', 'Sphingobium', 'Sphingomonas', 'Sphingopyxis', 'Sulfuritalea', 'Tsukamurella', 'Undibacterium', 'Bosea', 'Brevibacillus', 'Caulobacter', 'Comamonas', 'Craurococcus', 'Cupriavidus', 'Devosia', 'Dietzia', 'Duganella', 'Dyadobacter', 'Enhydrobacter', 'Hoeflea', 'Hydrotalea', 'Janthinobacterium', 'Bifidobacterium', 'Kocuria', 'Limnobacter', 'Mesorhizobium', 'Methylophilus', 'Methyloversatilis', 'Microlunatus', 'Niastella', 'Novosphingobium', 'Olivibacter', 'Paracoccus', 'Patulibacter', 'Wautersiella', 'Actinobaculum', 'Anaerotruncus']
    return genera

def get_catcount():
    catcount = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
    return catcount

def get_g_oxygen():
    g_oxygen = ['obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'anaerobe (unspecified)', 'obligate anaerobe', 'facultative anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'microaerobe or anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'aerobe', 'facultative anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'obligate anaerobe', 'anaerobe (unspecified)', 'anaerobe (unspecified)', 'obligate anaerobe', 'not indicated', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'facultative anaerobe', 'facultative anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'not indicated', 'aerobe', 'anaerobe (unspecified)', 'obligate anaerobe', 'obligate anaerobe', 'aerobe', 'obligate anaerobe', 'aerobe', 'obligate anaerobe', 'aerobe', 'obligate anaerobe', 'aerobe', 'microaerobe or anaerobe', 'aerobe', 'anaerobe (unspecified)', 'anaerobe (unspecified)', 'not indicated', 'anaerobe (unspecified)', 'anaerobe (unspecified)', 'obligate anaerobe', 'aerobe', 'facultative anaerobe', 'aerobe', 'obligate anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'not indicated', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'not indicated', 'facultative anaerobe', 'obligate anaerobe', 'anaerobe (unspecified)', 'obligate anaerobe', 'obligate anaerobe', 'facultative anaerobe', 'not indicated', 'obligate anaerobe', 'obligate anaerobe', 'anaerobe (unspecified)', 'obligate anaerobe', 'not indicated', 'not indicated', 'aerobe', 'not indicated', 'not indicated', 'microaerobe or anaerobe', 'anaerobe (unspecified)', 'microaerobe or aerobe', 'obligate anaerobe', 'obligate anaerobe', 'aerobe', 'aerobe', 'not indicated', 'microaerobe', 'obligate anaerobe', 'not indicated', 'aerobe', 'obligate anaerobe', 'obligate anaerobe', 'microaerobe', 'microaerobe or aerobe', 'aerobe', 'aerobe', 'aerobe', 'aerobe', 'aerobe', 'aerobe', 'aerobe', 'facultative anaerobe', 'aerobe', 'not indicated', 'aerobe', 'aerobe', 'not indicated', 'aerobe', 'aerobe', 'not indicated', 'aerobe', 'aerobe', 'aerobe', 'aerobe', 'facultative anaerobe', 'aerobe', 'aerobe', 'aerobe', 'anaerobe (unspecified)', 'aerobe', 'obligate anaerobe', 'aerobe', 'aerobe', 'not indicated', 'aerobe', 'aerobe', 'obligate anaerobe', 'obligate anaerobe', 'obligate anaerobe', 'aerobe', 'not indicated', 'facultative anaerobe', 'obligate anaerobe']
    return g_oxygen

def get_g_morph():
    g_morph = ['rod/ bacilli', 'rod/ bacilli', 'oval-shaped/ coccobaccili', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'cocci or oval-shaped', 'slightly curved rods', 'rod/ bacilli', 'rods or oval-shaped', 'not indicated', 'rod/ bacilli', 'rods or slightly curved rods', 'fusiform', 'not indicated', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'cocci', 'rod/ bacilli', 'rod/ bacilli', 'oval-shaped/ coccobaccili', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'cocci', 'not indicated', 'cocci', 'rods or oval-shaped', 'cocci', 'slightly curved rods', 'slightly curved rods', 'cocci or oval-shaped', 'rod/ bacilli', 'ovoid', 'rod/ bacilli', 'cocci', 'rod/ bacilli', 'cocci', 'rod/ bacilli', 'rod/ bacilli', 'pleomorphic', 'not indicated', 'rod/ bacilli', 'cocci', 'ovoid', 'rod/ bacilli', 'rods or slightly curved rods', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'cocci', 'rod/ bacilli', 'rod/ bacilli', 'cocci or oval-shaped', 'not indicated', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'oval-shaped/ coccobaccili', 'not indicated', 'rod/ bacilli', 'rod/ bacilli', 'slightly curved rods', 'rods or slightly curved rods', 'not indicated', 'rods, cocci, or oval-shaped', 'rod/ bacilli', 'rod/ bacilli', 'cocci', 'rods or slightly curved rods', 'rods, cocci, or oval-shaped', 'rod/ bacilli', 'rods, cocci, or oval-shaped', 'oval-shaped/ coccobaccili', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'cocci or oval-shaped', 'rod/ bacilli', 'rod/ bacilli', 'slightly curved rods', 'rod/ bacilli', 'rod/ bacilli', 'oval-shaped/ coccobaccili', 'rods or slightly curved rods', 'not indicated', 'not indicated', 'rod/ bacilli', 'rod/ bacilli', 'slightly curved rods', 'slightly curved rods', 'slightly curved rods', 'rod/ bacilli', 'rods or cocci', 'rod/ bacilli', 'rod/ bacilli', 'rods or slightly curved rods', 'rods or cocci', 'rod/ bacilli', 'rod/ bacilli', 'not indicated', 'rods or slightly curved rods', 'rods or slightly curved rods', 'rod/ bacilli', 'rod/ bacilli', 'slightly curved rods', 'rods or cocci', 'cocci', 'rod/ bacilli', 'rod/ bacilli', 'oval-shaped/ coccobaccili', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'slightly curved rods', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'not indicated', 'rods or slightly curved rods', 'cocci', 'rod/ bacilli', 'rod/ bacilli', 'rods or cocci', 'rod/ bacilli', 'rods or cocci', 'rods or cocci', 'rod/ bacilli', 'rod/ bacilli', 'rod/ bacilli', 'not indicated', 'cocci', 'slightly curved rods', 'rod/ bacilli', 'rods or slightly curved rods', 'rod/ bacilli', 'cocci', 'not indicated', 'rod/ bacilli', 'rod/ bacilli', 'cocci', 'rod/ bacilli', 'rod/ bacilli', 'rods or slightly curved rods', 'rod/ bacilli']
    return g_morph

def get_g_motil():
    g_motil = ['non-motile', 'non-motile', 'non-motile', 'not indicated', 'not indicated', 'non-motile', 'non-motile', 'motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'motile', 'non-motile', 'non-motile', 'variable', 'non-motile', 'not indicated', 'non-motile', 'non-motile', 'not indicated', 'motile', 'non-motile', 'not indicated', 'not indicated', 'non-motile', 'variable', 'motile', 'non-motile', 'non-motile', 'not indicated', 'non-motile', 'non-motile', 'motile', 'motile', 'non-motile', 'non-motile', 'motile', 'motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'not indicated', 'not indicated', 'non-motile', 'variable', 'non-motile', 'motile', 'motile', 'not indicated', 'non-motile', 'motile', 'non-motile', 'non-motile', 'motile', 'non-motile', 'variable', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'motile', 'variable', 'not indicated', 'motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'not indicated', 'motile', 'non-motile', 'non-motile', 'non-motile', 'not indicated', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'not indicated', 'non-motile', 'non-motile', 'non-motile', 'non-motile', 'motile', 'non-motile', 'motile', 'non-motile', 'motile', 'motile', 'motile', 'variable', 'variable', 'motile', 'not indicated', 'non-motile', 'variable', 'non-motile', 'motile', 'non-motile', 'motile', 'motile', 'not indicated', 'motile', 'variable', 'non-motile', 'not indicated', 'motile', 'non-motile', 'non-motile', 'motile', 'not indicated', 'non-motile', 'variable', 'variable', 'variable', 'motile', 'non-motile', 'non-motile', 'not indicated', 'motile', 'motile', 'motile', 'non-motile', 'motile', 'motile', 'not indicated', 'motile', 'non-motile', 'not indicated', 'motile', 'non-motile', 'motile', 'not indicated', 'not indicated', 'motile', 'motile', 'variable', 'non-motile', 'non-motile', 'motile', 'variable', 'non-motile', 'non-motile', 'not indicated', 'non-motile', 'non-motile', 'not indicated']
    return g_motil

def get_g_spore():
    g_spore = ['non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'mixed', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'spore forming', 'non-spore forming', 'mixed', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'spore forming', 'non-spore forming', 'spore forming', 'spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'not indicated', 'non-spore forming', 'not indicated', 'not indicated', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'non-spore forming', 'not indicated', 'non-spore forming', 'non-spore forming']
    return g_spore

def get_g_gram():
    g_gram = ['Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-variable', 'Gram-positive', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-variable', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-variable', 'Gram-variable', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-variable', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'not indicated', 'Gram-positive', 'not indicated', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-positive', 'Gram-positive', 'Gram-variable', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'not indicated', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-variable', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'not indicated', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-negative', 'Gram-positive', 'Gram-negative', 'Gram-positive', 'Gram-positive']
    return g_gram

def get_g_bile():
    g_bile = ['growth in 20% bile', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'no growth in 20% bile', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated']
    return g_bile

def get_g_sacc():
    g_sacc = ['saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'not indicated', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'not indicated', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'saccharolytic', 'asaccharolytic', 'not indicated', 'not indicated', 'asaccharolytic', 'asaccharolytic', 'mixed', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'mixed', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'saccharolytic', 'asaccharolytic', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'saccharolytic', 'not indicated', 'saccharolytic', 'asaccharolytic', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'asaccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'saccharolytic', 'saccharolytic', 'asaccharolytic', 'asaccharolytic', 'not indicated', 'asaccharolytic', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'asaccharolytic', 'saccharolytic', 'mixed', 'saccharolytic', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'saccharolytic', 'not indicated', 'asaccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'saccharolytic', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'asaccharolytic', 'asaccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'saccharolytic', 'not indicated', 'asaccharolytic', 'saccharolytic', 'saccharolytic', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'not indicated', 'asaccharolytic', 'not indicated', 'not indicated', 'saccharolytic', 'saccharolytic']
    return g_sacc

